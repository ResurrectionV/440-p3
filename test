#Import

from collections import deque
import random

#class & main function

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.parent = None
        
class lList:
    def __init__(self, head):
        self.head = head


class Project3:
    
    def __init__(self):
        self.grid = None
        self.s_space = []
        self.a_space = []
        # 0.edge 1.robot 2.Sheep 3transition prob   0meansNot 1meansYes
        self.p3_dic = {}
        self.s_pos = (0,0)
        self.r_pos = (0,0)
        self.block_pos = [(26,25),(26,26),(25,26),(24,26),(26,24),(25,24),(24,24)]
        
    def randPos(self):
        self.s_pos = (random.randint(0,50),random.randint(0,50))
        self.r_pos = (random.randint(0,50),random.randint(0,50))
        while self.s_pos in self.block_pos or self.r_pos in self.block_pos or self.r_pos == self.s_pos:
            self.s_pos = (random.randint(0,50),random.randint(0,50))
            self.r_pos = (random.randint(0,50),random.randint(0,50))
        
        
    def setUp(self):
        self.grid = [[0]*51 for _ in range(51)]
        self.grid[26][25] = 1
        self.grid[26][26] = 1
        self.grid[25][26] = 1
        self.grid[24][26] = 1
        self.grid[26][24] = 1
        self.grid[25][24] = 1
        self.grid[24][24] = 1
        
        self.randPos()
        
        
        
    def printGrid(self):
        for i in range(51):
            for j in range(51):
                print(self.grid[i][j], end='')
            print()
        
    
    def sheep_check_robot(self, sheep_pos, robot_pos):
        cond1 = abs(robot_pos[0] - sheep_pos[0])
        cond2 = abs(robot_pos[1] - sheep_pos[1])
        if cond1 < 3 and cond2 < 3:
            return True
        return False
    
    def sheep_possible_move(self, sheep_pos, robot_pos):
        s_aSpace = [sheep_pos]
        dirs = [
        lambda x, y: (x + 1, y),
        lambda x, y: (x - 1, y),
        lambda x, y: (x, y + 1),
        lambda x, y: (x, y - 1)
        ]
        if self.sheep_check_robot(sheep_pos, robot_pos):
            cond1 = robot_pos[0]-sheep_pos[0]
            cond2 = robot_pos[1]-sheep_pos[1]
            if cond1 > 0:
                next_pos = (sheep_pos[0]+1,sheep_pos[1])
                if next_pos not in self.block_pos:
                    s_aSpace.append(next_pos)
            if cond1 < 0:
                next_pos = (sheep_pos[0]-1,sheep_pos[1])
                if next_pos not in self.block_pos:
                    s_aSpace.append(next_pos)
            
            if cond2 > 0:
                next_pos = (sheep_pos[0],sheep_pos[1]+1)
                if next_pos not in self.block_pos:
                    s_aSpace.append(next_pos)
            if cond2 < 0:
                next_pos = (sheep_pos[0]+1,sheep_pos[1]-1)
                if next_pos not in self.block_pos:
                    s_aSpace.append(next_pos)
            return s_aSpace
        for di in dirs:
            next_pos = di(sheep_pos[0],sheep_pos[1])
            if next_pos[0] < 0 or next_pos[0] > 50 or next_pos[1] < 0 or next_pos[1] > 50:
                continue
            if next_pos not in self.block_pos:
                s_aSpace.append(next_pos)
        return s_aSpace
    
    def robot_possible_move(self, sheep_pos, robot_pos):
        r_aSpace = [robot_pos]
        dirs = [
        lambda x, y: (x + 1, y),
        lambda x, y: (x - 1, y),
        lambda x, y: (x, y + 1),
        lambda x, y: (x, y - 1),
        lambda x, y: (x - 1, y - 1),
        lambda x, y: (x - 1, y + 1),
        lambda x, y: (x + 1, y - 1),
        lambda x, y: (x + 1, y + 1)
        ]
        for di in dirs:
            next_pos = di(robot_pos[0],robot_pos[1])
            if next_pos[0] < 0 or next_pos[1] < 0 or next_pos[0] > 50 or next_pos[1] >50:
                continue
            if (next_pos not in self.block_pos) and (not next_pos == sheep_pos):
                r_aSpace.append(next_pos)
        return r_aSpace
    
    def check_0(self, dict_g):
        for item in list(dict_g):
            if list(item)[0] == (24,25):
                continue
            if dict_g[item] == 0:
                return False
        return True
        
    def value_iteration(self):
        state_Space = {}
        visited = []
        new = []
        for i in range(51):
            for j in range(51):
                for k in range(51):
                    for c in range(51):
                        if (i,j) not in self.block_pos and (k,c) not in self.block_pos and not (i,j) == (k,c):
                            state_Space[str([(i,j),(k,c)])] = 0
                            if (i,j) == (24,25):
                                state_Space[str([(i,j),(k,c)])] = 1
                                visited.append([(i,j),(k,c)])
                                new.append([(i,j),(k,c)])
        
        
        while self.check_0(state_Space):
            for item in new:
                sheep_space = self.sheep_possible_move(item[0], item[1])
                robot_space = self.robot_possible_move(item[0], item[1])
                total_space = []
                for i in sheep_space:
                    for j in robot_space:
                        if not [i,j] in visited and not i == (25,25) and not i == j:
                            total_space.append([i,j])
                            
                for i in total_space:
                    visited.append(i)
                    next_sheep_space = self.sheep_possible_move(i[0], i[1])
                    next_robot_space = self.robot_possible_move(i[0], i[1])
                    prob = 1/len(next_sheep_space)
                    next_total_space = []
                    for j in next_sheep_space:
                        for k in next_robot_space:
                            if not j == k:
                                next_total_space.append([j,k])
                    state_Space[str(i)] = 1
                    for j in next_total_space:
                        state_Space[str(i)] = state_Space[str(i)] + prob * state_Space[str(j)]
                new.remove(item)
                for i in total_space:
                    new.append(i)
        return state_Space
            
        

#Code run
p3 = Project3()
p3.setUp()
p3.randPos()
print(p3.s_pos)
print(p3.r_pos)
print(p3.value_iteration())
